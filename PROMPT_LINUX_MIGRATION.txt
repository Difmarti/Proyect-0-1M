================================================================================
üöÄ PROMPT PARA EJECUTAR EN SERVIDOR LINUX
================================================================================

INSTRUCCI√ìN: Copia y pega EXACTAMENTE estos comandos en tu terminal SSH del
servidor Linux (10.30.90.102) despu√©s de hacer git push desde Windows.

================================================================================
PASO 1: IDENTIFICAR LA RUTA DEL PROYECTO
================================================================================

Primero, encuentra d√≥nde est√° instalado el proyecto:

    pwd
    ls -la

Si no est√°s en el directorio del proyecto, navega a √©l:

    cd /home/usuario/trading-bot
    # O la ruta donde tengas el proyecto

================================================================================
PASO 2: COMANDO DE MIGRACI√ìN COMPLETO (TODO EN UNA L√çNEA)
================================================================================

COPIA Y PEGA ESTA L√çNEA COMPLETA:

docker-compose down && git pull origin main && docker-compose up -d timescaledb && sleep 5 && docker exec -i trading_timescaledb psql -U trading_user -d trading_db < postgres/migrate_to_v2.sql && echo "‚úÖ Verificando migraci√≥n..." && docker exec -it trading_timescaledb psql -U trading_user -d trading_db -c "SELECT * FROM schema_version;" && docker-compose up -d && echo "‚úÖ Migraci√≥n completada! Monitoreando logs..." && docker-compose logs -f trading_bridge

================================================================================
¬øQU√â HACE ESTE COMANDO?
================================================================================

1. docker-compose down
   ‚Üí Detiene todos los servicios

2. git pull origin main
   ‚Üí Descarga los √∫ltimos cambios del repositorio

3. docker-compose up -d timescaledb
   ‚Üí Inicia solo PostgreSQL

4. sleep 5
   ‚Üí Espera 5 segundos a que PostgreSQL est√© listo

5. docker exec -i trading_timescaledb psql ... < migrate_to_v2.sql
   ‚Üí Ejecuta el script de migraci√≥n

6. docker exec -it ... "SELECT * FROM schema_version;"
   ‚Üí Verifica que la migraci√≥n funcion√≥ (deber√≠a mostrar version = 2)

7. docker-compose up -d
   ‚Üí Reinicia todos los servicios

8. docker-compose logs -f trading_bridge
   ‚Üí Muestra los logs en tiempo real

================================================================================
SALIDA ESPERADA
================================================================================

Deber√≠as ver algo como esto:

==================================================
STEP 1: Creating backup tables...
==================================================
Backups created successfully!

==================================================
STEP 2: Updating price_data columns...
==================================================
price_data updated: DECIMAL(10,5) ‚Üí DECIMAL(12,5)

...

==================================================
MIGRATION COMPLETED SUCCESSFULLY!
==================================================

‚úÖ Verificando migraci√≥n...

 version |                    description
---------+----------------------------------------------------
       2 | Support for cryptocurrency prices - DECIMAL(12,2)

‚úÖ Migraci√≥n completada! Monitoreando logs...

INFO - MT5 connection initialized successfully
INFO - Stored 1000/1000 price records for BTCUSD
INFO - Synced 3 active trades

================================================================================
VERIFICACI√ìN MANUAL (SI QUIERES REVISAR PASO A PASO)
================================================================================

Si prefieres ejecutar cada paso manualmente:

# 1. Detener bot
docker-compose down

# 2. Actualizar repo
git pull origin main

# 3. Verificar que el archivo existe
ls -la postgres/migrate_to_v2.sql

# 4. Iniciar PostgreSQL
docker-compose up -d timescaledb

# 5. Esperar
sleep 5

# 6. Ejecutar migraci√≥n
docker exec -i trading_timescaledb psql -U trading_user -d trading_db < postgres/migrate_to_v2.sql

# 7. Verificar versi√≥n
docker exec -it trading_timescaledb psql -U trading_user -d trading_db -c "SELECT * FROM schema_version;"

# Deber√≠a mostrar:
# version | 2

# 8. Reiniciar todo
docker-compose up -d

# 9. Ver logs
docker-compose logs -f trading_bridge

================================================================================
VERIFICACI√ìN POST-MIGRACI√ìN
================================================================================

# 1. Verificar que NO haya errores de overflow
docker-compose logs trading_bridge | grep "numeric field overflow"

# Resultado esperado: VAC√çO (sin resultados)

# 2. Verificar precios de BTCUSD sincroniz√°ndose
docker exec -it trading_timescaledb psql -U trading_user -d trading_db -c "SELECT symbol, close, time FROM price_data WHERE symbol = 'BTCUSD' AND time >= NOW() - INTERVAL '5 minutes' ORDER BY time DESC LIMIT 5;"

# Deber√≠a mostrar precios como:
# BTCUSD | 43250.50 | 2025-10-23 20:05:00

# 3. Verificar que el bot est√© corriendo
docker-compose ps

# Todos los servicios deber√≠an estar "Up"

================================================================================
SOLUCI√ìN DE PROBLEMAS
================================================================================

ERROR: "No such file or directory: postgres/migrate_to_v2.sql"
SOLUCI√ìN:
    - Verifica que hiciste git pull
    - Verifica que est√°s en el directorio correcto
    - Ejecuta: ls postgres/migrate_to_v2.sql

ERROR: "relation 'price_data' does not exist"
SOLUCI√ìN:
    - La base de datos no est√° inicializada
    - Ejecuta: docker exec -i trading_timescaledb psql -U trading_user -d trading_db < postgres/init.sql

ERROR: "permission denied"
SOLUCI√ìN:
    - Usa postgres superuser:
    - docker exec -it trading_timescaledb psql -U postgres -d trading_db

ERROR: El bot sigue mostrando "numeric overflow"
SOLUCI√ìN:
    1. docker-compose down
    2. docker-compose up -d timescaledb
    3. docker exec -i trading_timescaledb psql -U trading_user -d trading_db < postgres/migrate_to_v2.sql
    4. docker-compose up -d

================================================================================
PARA DETENER EL MONITOREO DE LOGS
================================================================================

Presiona: Ctrl+C

(Esto solo detiene el monitoreo, NO detiene el bot)

================================================================================
DOCUMENTACI√ìN COMPLETA
================================================================================

Para m√°s detalles, revisa estos archivos en el repositorio:

- postgres/MIGRATION_INSTRUCTIONS.md  ‚Üí Gu√≠a detallada paso a paso
- postgres/README.md                   ‚Üí Documentaci√≥n del schema
- CHANGELOG_DATABASE_V2.md             ‚Üí Historial de cambios
- RESUMEN_ACTUALIZACION.md             ‚Üí Resumen ejecutivo

================================================================================
