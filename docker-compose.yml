version: '3.8'

services:
  # TimescaleDB for storing trading data
  timescaledb:
    image: timescale/timescaledb:latest-pg15
    container_name: trading_timescaledb
    restart: unless-stopped
    environment:
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - PGDATA=/var/lib/postgresql/data/pgdata
    volumes:
      - type: volume
        source: timescale_data
        target: /var/lib/postgresql/data
      - type: bind
        source: ./postgres/init.sql
        target: /docker-entrypoint-initdb.d/init.sql
        read_only: true
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U trading_user -d trading_db"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - trading_network

  # Redis for caching and message queue
  redis:
    image: redis:7-alpine
    container_name: trading_redis
    restart: unless-stopped
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 5s
      retries: 3
    networks:
      - trading_network

  # Python Bridge for MT4 communication
  python_bridge:
    build:
      context: ./python-bridge
      dockerfile: Dockerfile
    container_name: trading_bridge
    restart: unless-stopped
    depends_on:
      timescaledb:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - REDIS_HOST=redis
      - MT4_ACCOUNT=${MT4_ACCOUNT}
      - MT4_PASSWORD=${MT4_PASSWORD}
      - MT4_SERVER=${MT4_SERVER}
    volumes:
      - ./python-bridge:/app
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 5s
      retries: 3
      start_period: 30s
    networks:
      - trading_network

  # FastAPI REST service
  api:
    build:
      context: ./api
      dockerfile: Dockerfile
    container_name: trading_api
    restart: unless-stopped
    depends_on:
      timescaledb:
        condition: service_healthy
    environment:
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - CORS_ORIGINS=http://localhost:8501
      - PORT=8080
    ports:
      - "8080:8080"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 5s
      retries: 3
    networks:
      - trading_network

  # Streamlit Dashboard
  dashboard:
    build:
      context: ./dashboard
      dockerfile: Dockerfile
    container_name: trading_dashboard
    restart: unless-stopped
    depends_on:
      - api
    environment:
      - API_URL=http://api:8080
    ports:
      - "8501:8501"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8501/healthz"]
      interval: 30s
      timeout: 5s
      retries: 3
    networks:
      - trading_network

  # Portainer for container management
  portainer:
    image: portainer/portainer-ce:latest
    container_name: trading_portainer
    restart: unless-stopped
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - portainer_data:/data
    ports:
      - "9000:9000"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/api/system/status"]
      interval: 30s
      timeout: 5s
      retries: 3
    networks:
      - trading_network

volumes:
  timescale_data:
    name: trading_timescale_data
  redis_data:
    name: trading_redis_data
  portainer_data:
    name: trading_portainer_data

networks:
  trading_network:
    name: trading_network
