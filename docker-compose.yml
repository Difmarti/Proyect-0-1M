version: '3.8'

services:
  # ======================
  # BASE DE DATOS
  # ======================
  postgres:
    image: postgres:15-alpine
    restart: unless-stopped
    environment:
      POSTGRES_USER: trading_admin
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-SuperSecurePass123!}
      POSTGRES_DB: trading_bot
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init_scripts:/docker-entrypoint-initdb.d
    ports:
      - "5432:5432"
    networks:
      - trading_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U trading_admin"]
      interval: 10s
      timeout: 5s
      retries: 5

  # ======================
  # CACHE Y MESSAGE QUEUE
  # ======================
  redis:
    image: redis:7-alpine
    restart: unless-stopped
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - trading_network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # ======================
  # TIME SERIES DATABASE (para datos de mercado)
  # ======================
  timescaledb:
    image: timescale/timescaledb:latest-pg15
    restart: unless-stopped
    environment:
      POSTGRES_USER: timescale_user
      POSTGRES_PASSWORD: ${TIMESCALE_PASSWORD:-TimescalePass123!}
      POSTGRES_DB: market_data
    volumes:
      - timescale_data:/var/lib/postgresql/data
    ports:
      - "5433:5432"
    networks:
      - trading_network

  # ======================
  # BOT DE TRADING PRINCIPAL
  # ======================
  trading-bot:
    build:
      context: ./trading_bot
      dockerfile: Dockerfile
    image: trading-bot:latest
    restart: unless-stopped
    depends_on:
      - postgres
      - redis
    environment:
      # Configuraci칩n de Broker
      BROKER: tickmill
      MT_VERSION: ${MT_VERSION:-MT5}
      TICKMILL_SERVER: ${TICKMILL_SERVER:-Tickmill-Demo}
      TICKMILL_LOGIN: ${TICKMILL_LOGIN}
      TICKMILL_PASSWORD: ${TICKMILL_PASSWORD}
      
      # Configuraci칩n de Trading
      SYMBOL: ${SYMBOL:-EURUSD}
      TIMEFRAME: ${TIMEFRAME:-M5}
      INITIAL_CAPITAL: ${INITIAL_CAPITAL:-100}
      RISK_PER_TRADE: ${RISK_PER_TRADE:-0.02}
      
      # Configuraci칩n de Base de Datos
      DB_HOST: postgres
      DB_PORT: 5432
      DB_NAME: trading_bot
      DB_USER: trading_admin
      DB_PASSWORD: ${POSTGRES_PASSWORD:-SuperSecurePass123!}
      
      # Redis
      REDIS_HOST: redis
      REDIS_PORT: 6379
      
      # TimescaleDB
      TIMESCALE_HOST: timescaledb
      TIMESCALE_PORT: 5432
      TIMESCALE_DB: market_data
      TIMESCALE_USER: timescale_user
      TIMESCALE_PASSWORD: ${TIMESCALE_PASSWORD:-TimescalePass123!}
      
      # Modo
      TRADING_MODE: ${TRADING_MODE:-demo}
      
    volumes:
      - ./trading_bot:/app
      - ./logs:/app/logs
      - ./models:/app/models
      - metatrader_data:/mt_data
    networks:
      - trading_network
    command: python main.py

  # ======================
  # SERVICIO DE IA/ML
  # ======================
  ml-engine:
    build:
      context: ./ml_engine
      dockerfile: Dockerfile
    image: ml-engine:latest
    restart: unless-stopped
    depends_on:
      - postgres
      - redis
    environment:
      DB_HOST: postgres
      DB_PORT: 5432
      DB_NAME: trading_bot
      DB_USER: trading_admin
      DB_PASSWORD: ${POSTGRES_PASSWORD:-SuperSecurePass123!}
      REDIS_HOST: redis
      REDIS_PORT: 6379
      MODEL_UPDATE_INTERVAL: ${MODEL_UPDATE_INTERVAL:-3600}
      OPENAI_API_KEY: ${OPENAI_API_KEY:-optional}
    volumes:
      - ./ml_engine:/app
      - ./models:/app/models
      - ./training_data:/app/training_data
    networks:
      - trading_network
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 4G

  # ======================
  # API REST
  # ======================
  api:
    build:
      context: ./api
      dockerfile: Dockerfile
    image: trading-api:latest
    restart: unless-stopped
    depends_on:
      - postgres
      - redis
    environment:
      - DATABASE_URL=postgresql://trading_admin:${POSTGRES_PASSWORD}@postgres:5432/trading_bot
      - REDIS_URL=redis://redis:6379
      - JWT_SECRET=${JWT_SECRET:-your-secret-key-here}
      - API_KEY=${API_KEY:-your-api-key}
    ports:
      - "8000:8000"
    volumes:
      - ./api:/app
    networks:
      - trading_network

  # ======================
  # DASHBOARD WEB
  # ======================
  dashboard:
    build:
      context: ./dashboard
      dockerfile: Dockerfile
    image: trading-dashboard:latest
    restart: unless-stopped
    depends_on:
      - api
    environment:
      - API_URL=http://api:8000
      - STREAMLIT_SERVER_PORT=8501
      - STREAMLIT_SERVER_ADDRESS=0.0.0.0
    ports:
      - "8501:8501"
    volumes:
      - ./dashboard:/app
    networks:
      - trading_network

  # ======================
  # MONITORING - GRAFANA
  # ======================
  grafana:
    image: grafana/grafana:latest
    restart: unless-stopped
    environment:
      - GF_SECURITY_ADMIN_USER=${GRAFANA_USER:-admin}
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin123}
      - GF_INSTALL_PLUGINS=grafana-piechart-panel
    ports:
      - "3000:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/provisioning:/etc/grafana/provisioning
    networks:
      - trading_network

  # ======================
  # MONITORING - PROMETHEUS
  # ======================
  prometheus:
    image: prom/prometheus:latest
    restart: unless-stopped
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    networks:
      - trading_network

  # ======================
  # JUPYTER LAB (para an치lisis y desarrollo)
  # ======================
  jupyter:
    image: jupyter/datascience-notebook:latest
    restart: unless-stopped
    environment:
      - JUPYTER_ENABLE_LAB=yes
      - JUPYTER_TOKEN=${JUPYTER_TOKEN:-your-token-here}
    ports:
      - "8888:8888"
    volumes:
      - ./notebooks:/home/jovyan/work
      - ./data:/home/jovyan/data
      - ./models:/home/jovyan/models
    networks:
      - trading_network

  # ======================
  # NGINX REVERSE PROXY
  # ======================
  nginx:
    image: nginx:alpine
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
    depends_on:
      - dashboard
      - api
      - grafana
    networks:
      - trading_network

# ======================
# NETWORKS
# ======================
networks:
  trading_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.25.0.0/16

# ======================
# VOLUMES
# ======================
volumes:
  postgres_data:
  redis_data:
  timescale_data:
  grafana_data:
  prometheus_data:
  metatrader_data:
