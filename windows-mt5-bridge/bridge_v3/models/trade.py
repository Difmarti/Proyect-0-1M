"""
Trade-related data models
"""

from dataclasses import dataclass
from datetime import datetime
from typing import Optional
from enum import Enum


class SignalType(Enum):
    """Trading signal types"""
    LONG = "LONG"
    SHORT = "SHORT"
    NEUTRAL = "NEUTRAL"


@dataclass
class Trade:
    """Represents a trade (historical or active)"""
    ticket: int
    symbol: str
    trade_type: str  # BUY or SELL
    lots: float
    open_time: datetime
    open_price: float
    close_time: Optional[datetime] = None
    close_price: Optional[float] = None
    stop_loss: Optional[float] = None
    take_profit: Optional[float] = None
    profit: float = 0.0
    pips: float = 0.0
    strategy: str = 'manual'
    reason: Optional[str] = None
    comment: Optional[str] = None

    def is_active(self) -> bool:
        """Check if trade is still active"""
        return self.close_time is None

    def to_dict(self) -> dict:
        """Convert to dictionary for database insertion"""
        return {
            'ticket': self.ticket,
            'symbol': self.symbol,
            'type': self.trade_type,
            'lots': self.lots,
            'open_time': self.open_time,
            'open_price': self.open_price,
            'close_time': self.close_time,
            'close_price': self.close_price,
            'stop_loss': self.stop_loss,
            'take_profit': self.take_profit,
            'profit': self.profit,
            'pips': self.pips,
            'strategy': self.strategy,
            'reason': self.reason
        }


@dataclass
class Position:
    """Represents an active position from MT5"""
    ticket: int
    symbol: str
    position_type: str  # BUY or SELL
    volume: float
    price_open: float
    price_current: float
    sl: float
    tp: float
    profit: float
    time: datetime
    magic: int = 0
    comment: str = ''

    def calculate_pips(self) -> float:
        """Calculate profit/loss in pips"""
        point = 0.0001 if 'JPY' not in self.symbol else 0.01
        pips = (self.price_current - self.price_open) / point
        if self.position_type != 'BUY':
            pips = -pips
        return pips

    def to_trade(self) -> Trade:
        """Convert Position to Trade model"""
        return Trade(
            ticket=self.ticket,
            symbol=self.symbol,
            trade_type=self.position_type,
            lots=self.volume,
            open_time=self.time,
            open_price=self.price_open,
            stop_loss=self.sl if self.sl > 0 else None,
            take_profit=self.tp if self.tp > 0 else None,
            profit=self.profit,
            pips=self.calculate_pips()
        )


@dataclass
class TradeSignal:
    """Represents a trading signal generated by a strategy"""
    symbol: str
    signal_type: SignalType
    strategy: str
    price: float
    stop_loss: float
    take_profit: float
    timestamp: datetime
    confidence: float = 0.0  # 0-1 confidence score
    indicators: dict = None  # Supporting indicator values
    reason: str = ''

    def __post_init__(self):
        if self.indicators is None:
            self.indicators = {}

    def risk_reward_ratio(self) -> float:
        """Calculate risk/reward ratio"""
        if self.signal_type == SignalType.LONG:
            risk = abs(self.price - self.stop_loss)
            reward = abs(self.take_profit - self.price)
        else:
            risk = abs(self.stop_loss - self.price)
            reward = abs(self.price - self.take_profit)

        return reward / risk if risk > 0 else 0.0

    def to_dict(self) -> dict:
        """Convert to dictionary"""
        return {
            'symbol': self.symbol,
            'signal_type': self.signal_type.value,
            'strategy': self.strategy,
            'price': self.price,
            'stop_loss': self.stop_loss,
            'take_profit': self.take_profit,
            'timestamp': self.timestamp,
            'confidence': self.confidence,
            'indicators': self.indicators,
            'reason': self.reason,
            'risk_reward': self.risk_reward_ratio()
        }
